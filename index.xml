<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alexgb1</title>
    <link>https://alexgb1.github.io/</link>
    <description>Recent content on alexgb1</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Â© {year}</copyright>
    <lastBuildDate>Mon, 28 Dec 2020 11:13:43 +0100</lastBuildDate>
    <atom:link href="https://alexgb1.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Secret Sharing</title>
      <link>https://alexgb1.github.io/blog/secret-sharing/</link>
      <pubDate>Mon, 28 Dec 2020 11:13:43 +0100</pubDate>
      <guid>https://alexgb1.github.io/blog/secret-sharing/</guid>
      <description>&lt;p&gt;The general idea of secret sharing begins with a &lt;strong&gt;secret&lt;/strong&gt; which is divided into multiple pieces called &lt;strong&gt;shares&lt;/strong&gt;. Each share is assigned to a user in such a manner that a given subset of shares from users can be used to reconstruct the original secret.&lt;/p&gt;&#xA;&lt;p&gt;The motivation for this concept is related to the ability to safeguard cryptographic keys from loss or exposure. Secret sharing schemes are multi-party protocols related to the key establishment, where for example a private key in an asymmetric cryptosystem can be split between multiple entities for safely controlling decryption or signature creation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Your API as Data</title>
      <link>https://alexgb1.github.io/blog/your-api-as-data/</link>
      <pubDate>Sun, 13 Sep 2020 10:51:31 +0100</pubDate>
      <guid>https://alexgb1.github.io/blog/your-api-as-data/</guid>
      <description>&lt;p&gt;If you are interested in the correctness of your Web API, you should consider building a &lt;strong&gt;strongly typed&lt;/strong&gt; integration between the client and the server.&lt;/p&gt;&#xA;&lt;h2 id=&#34;just-the-usual&#34;&gt;Just the usual&lt;/h2&gt;&#xA;&lt;p&gt;In most cases, defining an API and using it can be quite prone to errors.&lt;/p&gt;&#xA;&lt;p&gt;Every Scala HTTP library has its own approach in building and defining endpoints, requests and responses which can become tedious in maintaining.&lt;/p&gt;&#xA;&lt;p&gt;Morever, there&amp;rsquo;s no support to properly document the APIs, &lt;em&gt;this means that the documentation is manually defined which will eventually lead to integration errors due to becoming outdated or to simple mistakes&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Faster Polynomial Evaluation</title>
      <link>https://alexgb1.github.io/blog/faster-polynomial-evaluation/</link>
      <pubDate>Sun, 06 Sep 2020 12:15:14 +0100</pubDate>
      <guid>https://alexgb1.github.io/blog/faster-polynomial-evaluation/</guid>
      <description>&lt;p&gt;This might not be one of your daily problems. Evaluating polynomials seems to be a simple task until the coefficients become big numbers, e.g. 1024 bits or more, and could impact your whole software component.&lt;/p&gt;&#xA;&lt;h2 id=&#34;classic-evaluation&#34;&gt;Classic evaluation&lt;/h2&gt;&#xA;&lt;p&gt;A simple way to evaluate a polynomial is:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def classicCompute(variable: BigInt): BigInt = {&#xA;    coefficients&#xA;    .zipWithIndex&#xA;    .foldLeft(BigInt(0)) {&#xA;       case (accumulator, (coefficient, i)) =&amp;gt; &#xA;          accumulator + coefficient * variable.pow(i)&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;optimized-evaluation&#34;&gt;Optimized evaluation&lt;/h2&gt;&#xA;&lt;p&gt;In order to optimize a polynomial evaluation, one could use &lt;a href=&#34;https://en.wikipedia.org/wiki/Horner%27s_method&#34; &#xA;  &#xA;   target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &#xA;&gt;Horner&amp;rsquo;s method&lt;/a&gt;, which implies a significant &lt;a href=&#34;https://en.wikipedia.org/wiki/Horner%27s_method#Efficiency&#34; &#xA;  &#xA;   target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34; &#xA;&gt;improvement&lt;/a&gt; when using big numbers.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
